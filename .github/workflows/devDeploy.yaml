name: Deploy KuchiAPI to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DIRECT_URL: ${{ secrets.DIRECT_URL }}
      SCHEMA: ${{ secrets.SCHEMA }}
      PORT: ${{ secrets.PORT }}
      JWT_SECRET_RESTAURANT: ${{ secrets.JWT_SECRET_RESTAURANT }}
      JWT_PRIVATE_KEY_RESTAURANT: ${{ secrets.JWT_PRIVATE_KEY_RESTAURANT }}
      JWT_PUBLIC_KEY_RESTAURANT: ${{ secrets.JWT_PUBLIC_KEY_RESTAURANT }}
      VPS_HOST: srv716497.hstgr.cloud  # Substitua pelo seu hostname
      VPS_USER: root  # Substitua pelo seu usu√°rio SSH
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}

    steps:
      - name: üõéÔ∏è Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Ajustar permiss√µes da chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Adicionar chave do host ao known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Testar conex√£o SSH com debug
        run: |
          ssh -vvv -i ~/.ssh/id_rsa ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo Conex√£o SSH bem-sucedida!"

      - name: üöÄ Deploy via SSH na VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          port: 22
          timeout: 120s  # Aumente o timeout para 120 segundos
          script: |
            echo "üîß Iniciando o processo de deploy..."

            # Vari√°veis
            APP_DIR="/home/ewertonigor/kuchiapi"  # Diret√≥rio recomendado (n√£o use /root)
            REPO_URL="git@github.com:Nume-Softwares/kuche-api.git"  # URL do reposit√≥rio

            # Verificando Docker e Docker Compose
            echo "üî® Verificando Docker e Docker Compose..."
            docker --version || (echo "Docker n√£o instalado!" && exit 1)
            docker compose version || (echo "Docker Compose n√£o instalado!" && exit 1)

            # Verificando e criando o diret√≥rio da aplica√ß√£o
            echo "üìÅ Verificando diret√≥rio..."
            if [ ! -d "$APP_DIR" ]; then
              echo "Criando diret√≥rio da aplica√ß√£o..."
              mkdir -p $APP_DIR
            fi

            # Atualizando ou clonando o reposit√≥rio
            echo "üîÑ Atualizando c√≥digo..."
            cd $APP_DIR
            if [ -d .git ]; then
              git pull origin main || (echo "Falha ao atualizar o reposit√≥rio!" && exit 1)
            else
              git clone $REPO_URL . || (echo "Falha ao clonar o reposit√≥rio!" && exit 1)
            fi

            # Instalando depend√™ncias e compilando a aplica√ß√£o NestJS
            echo "üî® Instalando depend√™ncias e compilando a aplica√ß√£o NestJS..."
            npm ci || (echo "Falha ao instalar depend√™ncias!" && exit 1)
            npm run build || (echo "Falha ao compilar o projeto!" && exit 1)

            # Subindo os containers com Docker Compose
            echo "üê≥ Subindo containers..."
            docker compose down || (echo "Falha ao parar containers antigos!" && exit 1)
            docker compose up -d --build || (echo "Falha ao subir os containers!" && exit 1)

            echo "‚úÖ Deploy finalizado!"